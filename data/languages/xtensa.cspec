<?xml version="1.0" encoding="UTF-8"?>

<compiler_spec>
  <data_organization>
     <absolute_max_alignment value="0" />
     <machine_alignment value="2" />
     <default_alignment value="1" />
     <default_pointer_alignment value="4" />
     <pointer_size value="4" />
     <wchar_size value="4" />
     <short_size value="2" />
     <integer_size value="4" />
     <long_size value="4" />
     <long_long_size value="8" />
     <float_size value="4" />
     <double_size value="8" />
     <long_double_size value="8" />
     <size_alignment_map>
          <entry size="1" alignment="1" />
          <entry size="2" alignment="2" />
          <entry size="4" alignment="4" />
          <entry size="8" alignment="8" />
     </size_alignment_map>
  </data_organization>
  <global>
    <range space="ram"/>
  </global>
  <stackpointer register="a1" space="ram"/>
  <default_proto>
    <!-- __stdcall
         Multi-word return values confuse the decompiler on non-leaf functions
         (The call4/8/12 instruction confuses register use analysis so that
         the decompiler thinks the return type is "undefined[16]".)  To
         eliminate that confusion, __stdcall only allows a return value in
         a2.  If a function does return more than 1 register, use __strrtn
         calling convention below.
     -->
    <prototype name="__stdcall" extrapop="0" stackshift="0">
      <input>
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="a2"/>
        </pentry>
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="a3"/>
        </pentry>
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="a4"/>
        </pentry>
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="a5"/>
        </pentry>
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="a6"/>
        </pentry>
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="a7"/>
        </pentry>
        <pentry minsize="1" maxsize="500" align="4">
          <addr offset="0" space="stack"/>
        </pentry>
      </input>
      <output>
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="a2"/>
        </pentry>
    </output>
    <returnaddress>
        <register name="a0"/>
    </returnaddress>
    <unaffected>
      <register name="a1"/>
    </unaffected>
    <killedbycall>
      <register name="a0"/> <!-- return address -->
      <register name="a2"/> <!-- arguments -->
      <register name="a3"/>
      <register name="a4"/>
      <register name="a5"/>
      <register name="a6"/>
      <register name="a7"/>

      <!-- callee saved for call0 ABI, overlaid for window ABI
      <register name="a8"/>
      <register name="a9"/>
      <register name="a10"/>
      <register name="a11"/>
      -->

      <register name="a12"/> <!-- caller-saved for call0 ABI -->
      <register name="a13"/> <!-- overlaid arguments for window ABI -->
      <register name="a14"/>
      <register name="a15"/>
    </killedbycall>
    </prototype>
  </default_proto>
  <!-- __strrtn
       calling convention to support multi-register return values
   -->
  <prototype name="__strrtn" extrapop="0" stackshift="0">
    <input>
      <pentry minsize="1" maxsize="4" extension="inttype">
        <register name="a2"/>
      </pentry>
      <pentry minsize="1" maxsize="4" extension="inttype">
        <register name="a3"/>
      </pentry>
      <pentry minsize="1" maxsize="4" extension="inttype">
        <register name="a4"/>
      </pentry>
      <pentry minsize="1" maxsize="4" extension="inttype">
        <register name="a5"/>
      </pentry>
      <pentry minsize="1" maxsize="4" extension="inttype">
        <register name="a6"/>
      </pentry>
      <pentry minsize="1" maxsize="4" extension="inttype">
        <register name="a7"/>
      </pentry>
      <pentry minsize="1" maxsize="500" align="4">
        <addr offset="0" space="stack"/>
      </pentry>
    </input>
    <output>
      <pentry minsize="1" maxsize="4" extension="inttype">
        <register name="a2"/>
      </pentry>
      <pentry minsize="5" maxsize="8" extension="inttype">
        <addr space="join" piece1="a3" piece2="a2"/>
      </pentry>
      <pentry minsize="9" maxsize="12" extension="inttype">
        <addr space="join" piece1="a4" piece2="a3" piece3="a2"/>
      </pentry>
      <pentry minsize="13" maxsize="16" extension="inttype">
        <addr space="join" piece1="a5" piece2="a4" piece3="a3" piece4="a2"/>
      </pentry>
  </output>
  <returnaddress>
      <register name="a0"/>
  </returnaddress>
  <unaffected>
    <register name="a1"/>
  </unaffected>
  <killedbycall>
    <register name="a0"/> <!-- return address -->
    <register name="a2"/> <!-- arguments -->
    <register name="a3"/>
    <register name="a4"/>
    <register name="a5"/>
    <register name="a6"/>
    <register name="a7"/>

    <!-- callee saved for call0 ABI, overlaid for window ABI
    <register name="a8"/>
    <register name="a9"/>
    <register name="a10"/>
    <register name="a11"/>
    -->

    <register name="a12"/> <!-- caller-saved for call0 ABI -->
    <register name="a13"/> <!-- overlaid arguments for window ABI -->
    <register name="a14"/>
    <register name="a15"/>
  </killedbycall>
  </prototype>
</compiler_spec>
